using _288Group.ECommerceShop.Persistance;
using _288Group.ECommerceShop.Web.Models;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Diagnostics;
using System.Text;

namespace _288Group.ECommerceShop.Web.Controllers
{
    public class HomeController : Controller
    {
        private readonly IPersistanceService _service;

        public HomeController(IPersistanceService service)
            => _service = service;

        public IActionResult Index(long? userId = null)
        {
            string username = "Guest";
            if (userId != null)
            {
                username = _service.GetUsername(userId.Value);
            }
            return View(new IndexViewModel(username, _service.GetAllProducts()));
        }

        [HttpGet]
        [Route("AddProductToBasket")]
        public string AddProductToBasket(long userId, long productId)
        {
            try
            {
                _service.AddProductToBasket(userId, productId);
                return "Product added to Basket";
            }
            catch (Exception ex)
            {
                return _service.LogError("Unable to product to Basket", ex);
            }
        }

        [HttpGet]
        [Route("AddMultipleProductsToBasket")]
        public string AddProductsToBasket(long userId, long[] productIds)
        {
            StringBuilder errorMessages = new StringBuilder();
            foreach (var productId in productIds)
            {
                try
                {
                    _service.AddProductToBasket(userId, productId);
                    errorMessages.Append($"Product {productId} added to Basket");
                }
                catch (Exception ex)
                {
                    errorMessages.Append(_service.LogError($"Unable to product {productId} to Basket", ex));
                }
            }

            if (errorMessages.Length == 0)
            {
                return "All Products added to Basket";
            }

            return errorMessages.ToString();
        }

        [HttpGet]
        [Route("TotalCostOfBasket")]
        public string TotalCostOfBasket(long userId)
        {
            try
            {
                return _service.TotalCostOfBasket(userId);
            }
            catch (Exception ex)
            {
                return _service.LogError($"Unable to retrieve total cost of Basket for user {userId}", ex);
            }
        }

        #region autogenerated
        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
        #endregion autogenerated
    }
}
